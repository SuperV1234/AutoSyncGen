constexpr int maxSecondsUntilTimeout{5};

class ClientHandler
{
	private:
		// Connect client ID. 
		// Assigned by the server.
		CID cid{nullCID};

		// IP and Port of the client.
		IpAddress ip;
		Port port;

		// Seconds until the client is timed out.
		int secondsUntilTimeout;
		
		// State of the client handler.
		bool busy{false};

	public:
		// Assumes the handler is not busy and binds it to a client with a
		// specific client ID, IP and Port.
		void bindToClient(CID mCID, const IpAddress& mIp, const Port& mPort);

		// Unbinds the handler from the client connection.
		void unbindFromClient();

		// Getters
		const auto& getCID() const noexcept;
		const auto& getIp() const noexcept;
		const auto& getPort() const noexcept;
};

class ClientHandlerManager
{
	private:
		// Next available unique client ID. 
		CID nextCID{0};

		// Memory management and recycling data structure for `ClientHandler` instances.
		ssvu::MonoManager<ClientHandler> clientHandlers;

		// Vector of non-busy client handlers.
		std::vector<ClientHandler*> chAvailable
		
		// Vector of busy client handlers.
		std::vector<ClientHandler*> chBusy;
		
		// Map of client handlers, by client ID.
		std::map<CID, ClientHandler*> chMap;

		// `void` future that wraps the thread which checks timeouts for client handlers.
		std::future<void> timeoutFuture;

		// Vector of client handler IDs that need to be disconnected.
		std::vector<CID> toDisconnect;

		// State of the client handler manager.
		bool busy{true};

		// Creates a client handler instance from the `MonoManager`
		// and inserts it into the 'available' vector.
		void createClientHandler();
		
		// Method ran in 'timeout' thread.
		// Periodically checks if clients have timed out.
		void runTimeout();

	public:	
		// Accepts a new client connection.
		// Uses an existing free handler, if available, otherwise allocates a new one.
		// Also removes all handlers that have to be disconnected and updates the ID map.
		auto& acceptClient(const IpAddress& mIp, const Port& mPort);

		// Returns true if an handler exists, by ID.
		bool has(CID mCID) const noexcept;

		// Gets a client handler by ID.
		auto& operator[](CID mCID) noexcept;

		// Refreshes the timeout duration when a ping is received for a specific client.
		void pingReceived(CID mCID) noexcept;
};